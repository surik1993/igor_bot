from aiogram import Bot
from aiogram import Dispatcher
from aiogram import executor
from aiogram.utils import deep_linking
#from aiogram.utils import executor

from aiogram.types import InlineKeyboardButton
from aiogram.types import InlineKeyboardMarkup
from aiogram.types import CallbackQuery
from aiogram.types import Message
from json import dumps
from json import loads
from json import load
import sys
import os
import db
import config
import json
import pandas as pd
import logging


#questions = os.path.dirname(sys.argv[0])
#with open(os.path.join(questions, 'questions.json'), 'rt') as jsonfile:
    #data = json.load(jsonfile)
    
questions = load(open("questions.json", "r", encoding="utf-8"))
#questions = load(open("C:\Users\ACER\Desktop\Einstein_IQ_Bot-master\bot.py", "r", encoding="utf-8"))
#"C:\Users\ACER\Desktop\Einstein_IQ_Bot-master\bot.py"
#bot = Bot(token=config.TOKEN) #–í–∞—à —Ç–æ–∫–µ–Ω
bot = Bot(token='6806372479:AAHTiIRPU6zFdXlZhpm9mg4bW-e_3kHe3p8')
#dp = Dispatcher(bot=bot)
dp = Dispatcher(bot)

#questions = load(open("questions.json", "r", encoding="utf-8"))


def compose_markup(question: int):
    km = InlineKeyboardMarkup(row_width=3)
    for i in range(len(questions[question]["variants"])):
        cd = {
            "question": question,
            "answer": i
        }
        km.insert(InlineKeyboardButton(questions[question]["variants"][i], callback_data=dumps(cd)))
    return km


def reset(uid: int):
    db.set_in_process(uid, False)
    db.change_questions_passed(uid, 0)
    db.change_questions_message(uid, 0)
    db.change_current_question(uid, 0)


@dp.callback_query_handler(lambda c: True)
async def answer_handler(callback: CallbackQuery):
    data = loads(callback.data)
    q = data["question"]
    is_correct = questions[q]["correct_answer"] - 1 == data["answer"]
    passed = db.get_questions_passed(callback.from_user.id)
    msg = db.get_questions_message(callback.from_user.id)
    if is_correct:
        passed += 1
        db.change_questions_passed(callback.from_user.id, passed)
    if q + 1 > len(questions) - 1:
        reset(callback.from_user.id)
        await bot.delete_message(callback.from_user.id, msg)
        await bot.send_message(
            callback.from_user.id,
            f"üéâ *–£—Ä–∞*, –≤—ã –ø—Ä–æ—à–ª–∏ —ç—Ç–æ—Ç —Ç–µ—Å—Ç\\!\n\nüîí –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ—Ç\\, —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω\\.\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤\\: *{passed} –∑ {len(questions)}*\\.\n\nüîÑ *–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç —Å–Ω–æ–≤–∞* \\- /play", parse_mode="MarkdownV2"
        )
        return
    await bot.edit_message_text(
        questions[q + 1]["text"],
        callback.from_user.id,
        msg,
        reply_markup=compose_markup(q + 1),
        parse_mode="MarkdownV2"
    )


@dp.message_handler(commands=["play"])
async def go_handler(message: Message):
    if not db.is_exists(message.from_user.id):
        db.add(message.from_user.id)
    if db.is_in_process(message.from_user.id):
        await bot.send_message(message.from_user.id, "üö´ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç, –ø–æ—Ç–æ–º—É —á—Ç–æ *–≤—ã —É–∂–µ –µ–≥–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ*\\.", parse_mode="MarkdownV2")
        return
    db.set_in_process(message.from_user.id, True)
    msg = await bot.send_message(
        message.from_user.id,
        questions[0]["text"],
        reply_markup=compose_markup(0),
        parse_mode="MarkdownV2"
    )
    db.change_questions_message(message.from_user.id, msg.message_id)
    db.change_current_question(message.from_user.id, 0)
    db.change_questions_passed(message.from_user.id, 0)


@dp.message_handler(commands=["finish"])
async def quit_handler(message: Message):
    if not db.is_in_process(message.from_user.id):
        await bot.send_message(message.from_user.id, "‚ùóÔ∏è–í—ã –µ—â–µ *–Ω–µ –Ω–∞—á–∞–ª–∏ —Ç–µ—Å—Ç*\\.", parse_mode="MarkdownV2")
        return
    reset(message.from_user.id)
    await bot.send_message(message.from_user.id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ *–∑–∞–∫–æ–Ω—á–∏–ª–∏ —Ç–µ—Å—Ç*\\.", parse_mode="MarkdownV2")


@dp.message_handler(commands=["start"])
async def start(message: Message):
    await message.answer("üëã *–ü—Ä–∏–≤–µ—Ç\\!* \nüß† *–ü—Ä–µ–¥–ª–∞–≥–∞—é –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à–µ –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ\\.*\n\nüìù –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ *15 –≤–æ–ø—Ä–æ—Å–æ–≤*\\. \n‚è± –ï—Å–ª–∏ –±—É–¥–µ—Ç–µ –¥—É–º–∞—Ç—å –∫–∞–∫ —Å–ª–µ–¥—É–µ—Ç, —á—Ç–æ —è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é, —Ç–µ—Å—Ç –∑–∞–π–º–µ—Ç *–æ–∫–æ–ª–æ 10 –º–∏–Ω—É—Ç*\\. \n\n‚ÅâÔ∏è *–ö–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å* ‚Äî –ª–æ–≥–∏—á–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ, –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Å–∏—Ç—É–∞—Ü–∏–µ–π\\. \nüìÑ –î–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Å–ª–æ–≤–∏—è —è –ø—Ä–µ–¥–ª–∞–≥–∞—é *–Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤*, –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ª–æ–≥–∏–∫–æ–π\\. \n\n‚ÅâÔ∏è –ü—Ä–∞–≤–∏–ª—å–Ω—ã–º —è–≤–ª—è–µ—Ç—Å—è *—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω* –æ—Ç–≤–µ—Ç, –µ–≥–æ –≤–∞–º –∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–±—Ä–∞—Ç—å\\. \nüîç –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å *–∞–±—Å—Ç—Ä–∞–≥–∏—Ä–æ–≤–∞—Ç—å—Å—è –æ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –º–∏—Ä–∞* –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞ —ç—Ç–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö\\.\n\n*–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç* \\- /play\n*–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ç–µ—Å—Ç* \\- /finish\n*–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞* \\- /help", parse_mode="MarkdownV2")


@dp.message_handler(commands=['help'])
async def cmd_answer(message: Message):
    await message.answer("‚ÅâÔ∏è<b> –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã.</b> \n‚úâÔ∏è <b>–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ</b> <a href='https://t.me/igo791820'>@igo791820</a><b>.</b>", disable_web_page_preview=True, parse_mode="HTML")
    

def main() -> None:
    executor.start_polling(dp, skip_updates=True)


if __name__ == "__main__":
    main()
